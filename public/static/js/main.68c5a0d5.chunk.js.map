{"version":3,"sources":["ui/Tile.js","ui/Board.js","ui/Interface.js","services/api.js","Sudoku.js","App.js","index.js"],"names":["Tile","puzzle","grid","handleChange","map","row","rowIndex","col","colIndex","className","value","type","onChange","e","Board","Interface","handleInterface","status","readOnly","onClick","REST","fetch","data","board","method","headers","body","JSON","stringify","getGrid","i","Array","fill","copy2DArray","from","to","length","Sudoku","useState","setGrid","puzzleStatus","setPuzzleStatus","initialGrid","useRef","action","handleCreate","newGrid","current","handleSolve","handleValidate","Error","response","json","game","console","log","solution","target","test","Number","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68c5a0d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Tile({ puzzle, grid, handleChange }) {\r\n  return grid.map((row, rowIndex) => {\r\n    return row.map((col, colIndex) => {\r\n      return (\r\n        <input\r\n          className={\r\n            puzzle[rowIndex][colIndex] !== 0\r\n              ? \"initial\"\r\n              : col !== 0\r\n              ? \"tile taken\"\r\n              : \"tile\"\r\n          }\r\n          value={col === 0 ? \"\" : col}\r\n          key={rowIndex + \" \" + colIndex}\r\n          type=\"text\"\r\n          onChange={(e) => handleChange(rowIndex, colIndex, e)}\r\n        />\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nfunction Board({ puzzle, grid, handleChange }) {\r\n  return (\r\n    <div className=\"board\">\r\n      <Tile puzzle={puzzle} grid={grid} handleChange={handleChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nfunction Interface({ handleInterface, status }) {\r\n  return (\r\n    <div className=\"interface\">\r\n      <div className=\"info-interface\">\r\n        <input readOnly value={status}></input>\r\n      </div>\r\n      <div className=\"action-interface\">\r\n        <button\r\n          className=\"generator-btn btn\"\r\n          onClick={() => {\r\n            handleInterface(\"create\");\r\n          }}\r\n        >\r\n          New game\r\n        </button>\r\n        {/* <button\r\n          className=\"validate-btn btn\"\r\n          onClick={() => {\r\n            handleInterface(\"validate\");\r\n          }}\r\n        >\r\n          Validate\r\n        </button> */}\r\n        <button\r\n          className=\"solve-btn btn\"\r\n          onClick={() => {\r\n            handleInterface(\"solve\");\r\n          }}\r\n        >\r\n          Solve\r\n        </button>\r\n        {/* <button\r\n          className=\"clear-btn btn\"\r\n          onClick={() => {\r\n            handleInterface(\"clear\");\r\n          }}\r\n        >\r\n          Clear\r\n        </button> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Interface;\r\n","export const REST = {\r\n  getBoard: function () {\r\n    //return fetch(`https://sudoku-back.onrender.com/puzzle`);\r\n    //return fetch(`http://localhost:5000/puzzle`);\r\n    return fetch(`/puzzle`)\r\n  },\r\n  solveBoard: function (grid) {\r\n    const data = {\r\n      board: grid,\r\n    };\r\n    return fetch(`/solve`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  },\r\n  validateBoard: function (grid) {\r\n    const data = {\r\n      board: grid,\r\n    };\r\n    return fetch(`/validate`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  },\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport Board from \"./ui/Board\";\r\nimport Interface from \"./ui/Interface\";\r\nimport { REST } from \"./services/api.js\";\r\n\r\nfunction getGrid() {\r\n  const grid = [];\r\n  for (let i = 0; i < 6; i++) {\r\n    grid[i] = Array(6).fill(0);\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction copy2DArray(from, to) {\r\n  for (let i = 0; i < from.length; i++) {\r\n    to[i] = [...from[i]];\r\n  }\r\n}\r\n\r\nfunction Sudoku() {\r\n  const [grid, setGrid] = useState(getGrid);\r\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\r\n  const initialGrid = useRef(getGrid());\r\n\r\n  function handleChange(row, col, e) {\r\n    const re = /^[0-6\\b]+$/;\r\n    if (e.target.value === \"\" || re.test(e.target.value)) {\r\n      if (Number(e.target.value) < 7 && initialGrid.current[row][col] === 0) {\r\n        const newGrid = [...grid];\r\n        newGrid[row][col] = Number(e.target.value);\r\n        setGrid(newGrid);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function handleInterface(action) {\r\n    let newGrid;\r\n    switch (action) {\r\n      case \"create\":\r\n        newGrid = await handleCreate();\r\n        copy2DArray(newGrid, initialGrid.current);\r\n        setPuzzleStatus(\"\");\r\n        setGrid(newGrid);\r\n        break;\r\n      case \"solve\":\r\n        newGrid = await handleSolve();\r\n        setGrid(newGrid);\r\n        break;\r\n      case \"clear\":\r\n        newGrid = getGrid();\r\n        copy2DArray(newGrid, initialGrid.current);\r\n        setGrid(newGrid);\r\n        setPuzzleStatus(\"\");\r\n        break;\r\n      case \"validate\":\r\n        const status = await handleValidate();\r\n        const puzzStats = status ? \"** SOLVED **\" : \"** UNSOLVED **\";\r\n        setPuzzleStatus(puzzStats);\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid action\");\r\n    }\r\n  }\r\n\r\n  async function handleCreate() {\r\n    try {\r\n      const response = await REST.getBoard();\r\n      const data = await response.json();\r\n      return data.game;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleValidate() {\r\n    try {\r\n      const response = await REST.validateBoard(grid);\r\n      const data = await response.json();\r\n      return data.status;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleSolve() {\r\n    try {\r\n      const response = await REST.solveBoard(grid);\r\n      const data = await response.json();\r\n      if (data.status) {\r\n        setPuzzleStatus(\"** SOLVED **\");\r\n        return data.solution;\r\n      } else {\r\n        setPuzzleStatus(\"** UNSOLVABLE **\");\r\n        return grid;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Sudoku\">\r\n      <Board\r\n        puzzle={initialGrid.current}\r\n        grid={grid}\r\n        handleChange={handleChange}\r\n      />\r\n      <Interface handleInterface={handleInterface} status={puzzleStatus} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sudoku;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport Sudoku from \"./Sudoku\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Sudoku />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}